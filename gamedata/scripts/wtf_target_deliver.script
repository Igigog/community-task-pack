local trace_assert = igi_helper.trace_assert
local TASK_STATUSES = igi_subtask.TASK_STATUSES

MAX_DISTANCE_SQR = 8

function is_close(se_obj_target, se_obj_location)
    if se_obj_target.parent_id ~= 65535 then
        return false
    end

	if se_obj_location.m_game_vertex_id ~= se_obj_target.m_game_vertex_id then
		return false
    end

	return se_obj_location.position:distance_to_sqr(se_obj_target.position) < MAX_DISTANCE_SQR
end

Deliver = {}
function Deliver.entity_on_first_run(entity)
    trace_assert(type(entity.id) == "number", "Deliver: entity.id is not a number")
    trace_assert(alife_object(entity.id), "Deliver: no server object for entity.id")

    trace_assert(type(entity.where) == "number", "Deliver: entity.where is not a number")
    trace_assert(alife_object(entity.where), "Deliver: no server object for entity.where")
end

function Deliver.status(entity)
    local se_target = alife_object(entity.id)
    local se_location = alife_object(entity.where)
    if (not se_target) or (not se_location) then return TASK_STATUSES.FAILED end

    if is_close(se_target, se_location) then
        return TASK_STATUSES.READY_TO_FINISH
    end

    return TASK_STATUSES.RUNNING
end

function Deliver.quest_target(entity)
    if (alife_object(entity.id).parent_id ~= 0) then
        return entity.id
    end
    return entity.where
end

-- 	db.actor:drop_item(obj)
