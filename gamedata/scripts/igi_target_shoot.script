TYP = igi_subtask.TARGET_TYPES.CONTINUOUS
TARGET_NAME = "shoot"
PATTERN = "basic"

----------------- Consistency -------------
entity_types = {
    "squad"
}
required_fields = {
    "section",
    "where"
}
optional_fields = {
    "weapon",           -- with which weapon to shoot
    "ammo_type",
    "shoot_any",        -- if true: any squad member; else: commander
    "keep_alive"        -- enemies mustn't die until end of quest
}
------------- END Consistency -------------

is_shotted = {}
local callback_set = {}

function on_game_start()
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
end

function save_state(m_data)
    m_data.igi_tasks_shoot_shotted = is_shotted
end

function load_state(m_data)
    is_shotted = m_data.igi_tasks_shoot_shotted or {}
end

local function create_callback_function(squad_id, target_ids, weapon, ammo_type)
    local function f(npc, shit)
        igi_helper.trace_dbg("shoot: callback: id", npc:id())
        if not target_ids[npc:id()] then return end

        local wpn = igi_helper.level_object(shit.weapon_id)
        if weapon and (wpn:section() ~= weapon) then return end

        if ammo_type then
	        local ammo_type_number = wpn:get_ammo_type()
	        local ammo_list = utils_item.get_ammo(wpn:section(), wpn:id())
	        local ammo_section = ammo_list[ammo_type_number+1]
            if ammo_section ~= ammo_type then return end
        end

        is_shotted[squad_id] = true
        UnregisterScriptCallback("npc_on_before_hit", f)
        UnregisterScriptCallback("monster_on_before_hit", f)
    end
    return f
end

local function get_target_ids(squad_id, shoot_any)
    local se_squad = igi_helper.alife_obj(squad_id)
    local ids = {}
    if shoot_any then
        for npc in se_squad:squad_members() do
            ids[npc.id] = true
        end
    else
        ids[se_squad:commander_id()] = true
    end
    return ids
end

local function set_callback(squad_id, weapon, ammo_type, shoot_any)
    local target_ids = get_target_ids(squad_id, shoot_any)
    igi_helper.trace_dbg("shoot: targets", target_ids)
    local f = create_callback_function(squad_id, target_ids, weapon, ammo_type)
    RegisterScriptCallback("npc_on_before_hit", f)
    RegisterScriptCallback("monster_on_before_hit", f)
    callback_set[squad_id] = f
end

function entity_on_after_target_creation(obj_data)
    local ids = get_target_ids(obj_data.id, obj_data.shoot_any)
    local targets = {}
    for id in pairs(ids) do
        local se_obj = igi_helper.alife_obj(id)
        local obj_entry = {
            id = se_obj.id,
            section_name = se_obj:section_name()
        }
        targets[#targets+1] = obj_entry
    end
    obj_data.shoot_targets = targets
end

function is_not_failed(obj_data)
    if not obj_data.keep_alive and is_shotted[obj_data.id] then
        return true
    else
        for _,v in pairs(obj_data.shoot_targets) do
            local se_obj = igi_helper.alife_obj(v.id)
            if not (se_obj and
                se_obj:section_name() == v.section_name and
                se_obj:alive()) then
                    return false
                end
        end
    end
    return true
end

function ready_to_finish(obj_data)
    if not is_shotted[obj_data.id] and not callback_set[obj_data.id] then
        igi_helper.trace_dbg("shoot: obj_data", obj_data)
        set_callback(obj_data.id, obj_data.weapon, obj_data.ammo_type, obj_data.shoot_any)
    end
    return is_shotted[obj_data.id]
end

function finish_subtask(obj_data)
    local callback = callback_set[obj_data.id]
    if callback then
        UnregisterScriptCallback("npc_on_before_hit", callback)
        UnregisterScriptCallback("monster_on_before_hit", callback)
        callback_set[obj_data.id] = nil
    end
    is_shotted[obj_data.id] = nil
end
